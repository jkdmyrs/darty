# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - master
    - release/*
  paths:
    include:
    - src
    - test
    - Darty.sln
    - azure-pipelines.yml

pool:
  vmImage: windows-latest

variables:
  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  isRelease: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/users/')]
  isMasterOrRelease: $[or(eq(variables.isMaster, true), eq(variables.isRelease, true))]
  disable.coverage.autogenerate: 'true'

stages:
- stage: Build
  jobs:
  - job: restore
    steps:  
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 3.1.x'
      inputs:
        packageType: sdk
        version: 3.1.x

    - task: DotNetCoreCLI@2
      displayName: dotnet restore
      inputs:
        command: 'restore'
        projects: '**/Darty.sln'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: dotnet build
      inputs:
        command: 'build'
        projects: '**/Darty.sln'
        arguments: '-c Release --no-restore'

    - task: DotNetCoreCLI@2
      displayName: dotnet test
      inputs:
        command: 'test'
        projects: '**/jkdmyrs.sln'
        arguments: '-c Release --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Include="[Darty.*]*" /p:Exclude="[Darty.*.Tests]*"'

    - task: DotNetCoreCLI@2
      displayName: dotnet publish (Darty.API)
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/Darty.API.csproj'
        arguments: '-c Release --no-build -o $(Build.ArtifactStagingDirectory)/out/Darty.API/'

    - task: DotNetCoreCLI@2
      displayName: dotnet publish (Darty.Web)
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/Darty.Web.csproj'
        arguments: '-c Release --no-build -o $(Build.ArtifactStagingDirectory)/out/Darty.Web/'

    - task: PublishBuildArtifacts@1
      displayName: publish drop
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/out'
        ArtifactName: 'drop'
        publishLocation: 'Container'

    - task: reportgenerator@4
      displayName: 'generate code coverate report'
      inputs:
        reports: '**/test/**/coverage.cobertura.xml'
        targetdir: '$(Build.ArtifactStagingDirectory)/TestResults/'

    - task: PublishCodeCoverageResults@1
      displayName: 'publish code coverage report'
      inputs:
        codeCoverageTool: cobertura
        summaryFileLocation: $(Build.ArtifactStagingDirectory)/TestResults/Cobertura.xml
        # To make the task not regenerate the report an environment variable was added to the pipeline in Azure DevOps; "disable.coverage.autogenerate: 'true'"
        # see: https://github.com/danielpalme/ReportGenerator/wiki/Integration#attention
        reportDirectory: '$(Build.ArtifactStagingDirectory)/TestResults/'

- stage: DEV
  dependsOn: Build
  condition: and(succeeded(), eq(variables.isMasterOrRelease, true))
  jobs:
  - job: functions
  - job: web

- stage: PROD
  condition: and(succeeded(), eq(variables.isRelease, true))
  jobs:
  - job: functions
  - job: web

