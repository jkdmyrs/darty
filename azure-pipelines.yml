# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - master
    - release/*
  paths:
    include:
    - src
    - test
    - Darty.sln
    - azure-pipelines.yml

pool:
  vmImage: ubuntu-latest

variables:
  - group: darty-secrets

  - name: isMaster
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]

  - name: isRelease
    value: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')]

  - name: isMasterOrRelease
    value: $[or(eq(variables.isMaster, true), eq(variables.isRelease, true))]

  - name: disable.coverage.autogenerate
    value: 'true'

  - name: DOTNET_CLI_TELEMETRY_OPTOUT
    value: true

stages:
- stage: Build
  jobs:
  - job: Build
    steps:  
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 3.1.x'
      inputs:
        packageType: sdk
        version: 3.1.x

    - task: DotNetCoreCLI@2
      displayName: dotnet restore
      inputs:
        command: 'restore'
        projects: '**/Darty.sln'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: dotnet build
      inputs:
        command: 'build'
        projects: '**/Darty.sln'
        arguments: '-c Release --no-restore'

    - task: DotNetCoreCLI@2
      displayName: dotnet test
      inputs:
        command: 'test'
        projects: '**/Darty.sln'
        arguments: '-c Release --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Include="[Darty.*]*" /p:Exclude="[Darty.*.Tests]*"'

    - task: DotNetCoreCLI@2
      displayName: dotnet publish (Darty.API)
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/Darty.API.csproj'
        arguments: '-c Release --no-build -o $(Build.ArtifactStagingDirectory)/out/Darty.API/'

    - task: DotNetCoreCLI@2
      displayName: dotnet publish (Darty.Web)
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/Darty.Web.csproj'
        arguments: '-c Release --no-build -o $(Build.ArtifactStagingDirectory)/out/Darty.Web/'

    - publish: $(Build.ArtifactStagingDirectory)/out
      artifact: drop

    - task: reportgenerator@4
      displayName: 'generate code coverate report'
      inputs:
        reports: '**/test/**/coverage.cobertura.xml'
        targetdir: '$(Build.ArtifactStagingDirectory)/TestResults/'

    - task: PublishCodeCoverageResults@1
      displayName: 'publish code coverage report'
      inputs:
        codeCoverageTool: cobertura
        summaryFileLocation: $(Build.ArtifactStagingDirectory)/TestResults/Cobertura.xml
        # To make the task not regenerate the report an environment variable was added to the pipeline in Azure DevOps; "disable.coverage.autogenerate: 'true'"
        # see: https://github.com/danielpalme/ReportGenerator/wiki/Integration#attention
        reportDirectory: '$(Build.ArtifactStagingDirectory)/TestResults/'

- stage: Dev
  dependsOn: Build
  condition: and(succeeded(), eq(variables.isMasterOrRelease, true))
  jobs:
  - job: Dev
    steps:
    - download: current
      artifact: drop

    - task: AzureFunctionApp@1
      displayName: 'deploy darty-api-dev'
      inputs:
        azureSubscription: 'msdn_319723_service_principal'
        appType: 'functionApp'
        appName: 'darty-api-dev'
        package: '$(Pipeline.Workspace)/drop/Darty.API/Darty.API.zip'
        AppSettings: '-GameBlobStorageConnectionString "$(darty-api-dev-storage-connection-string)" -AzureSignalRConnectionString "$(darty-signalr-dev-connection-string)"'

    - task: ExtractFiles@1
      displayName: 'extract darty-web'
      inputs:
        archiveFilePatterns: '$(Pipeline.Workspace)/drop/Darty.Web/Darty.Web.zip'
        destinationFolder: '$(Build.Repository.LocalPath)/dist/'

    - task: AzureStaticWebApp@0
      displayName: 'deploy darty-web-dev'
      inputs:
        app_location: "/dist/wwwroot/"
      env:
        azure_static_web_apps_api_token: '$(darty-web-dev-deploy-token)'

- stage: Prod
  dependsOn: Dev
  condition: and(succeeded(), eq(variables.isRelease, true))
  jobs:
  - job: Prod
    steps:
    - download: current
      artifact: drop

    - task: AzureFunctionApp@1
      displayName: 'deploy darty-api'
      inputs:
        azureSubscription: 'msdn_319723_service_principal'
        appType: 'functionApp'
        appName: 'darty-api'
        package: '$(Pipeline.Workspace)/drop/Darty.API/Darty.API.zip'
        AppSettings: '-GameBlobStorageConnectionString "$(darty-api-storage-connection-string)" -AzureSignalRConnectionString "$(darty-signalr-dev-connection-string)"'

    - task: ExtractFiles@1
      displayName: 'extract darty-web'
      inputs:
        archiveFilePatterns: '$(Pipeline.Workspace)/drop/Darty.Web/Darty.Web.zip'
        destinationFolder: '$(Build.Repository.LocalPath)/dist/'

    - task: AzureStaticWebApp@0
      displayName: 'deploy darty-web'
      inputs:
        app_location: "/dist/wwwroot/"
      env:
        azure_static_web_apps_api_token: '$(darty-web-deploy-token)'

