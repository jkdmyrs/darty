@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Darty.Core.Resources.Responses
@using Darty.Web.Settings
@using Darty.Web.Hubs
@inject Darty.Core.ApiClient.DartyApiClient ApiClient
@inject ClientConfig Config;

@if (_game == null)
{
    <h1>It's Darty Time!</h1>
    <p>Use the Darty app to connect to your game.</p>
    <p style="font-size:xx-large">@_gameId</p>
}
else
{
    <p>Players: @_game.Player1.Name (@_game.Player1.Score) / @_game.Player2.Name (@_game.Player2.Score)</p>
    <p>Winner: @_game.HasWinner</p>
    <p>Throws: </p>
    <ul>
        @foreach(var dartThrow in _game.ThrowHistory)
        {
            <li>@dartThrow.Player - @dartThrow.Value - @dartThrow.Multiplier</li>
        }
    </ul>
}

@code {
    private HubConnection _gameHub;
    private string _gameId;
    private GameModelResponse _game = null;

    protected override async Task OnInitializedAsync()
    {
        _gameId = await ApiClient.GenerateGameId();
        Console.WriteLine($"GameId: {_gameId}");

        _gameHub = GameHubBuilder.Build(_gameId, NewGame, DartThrow, GetGameOnReconnected, Config.ApiBaseUrl);
        await _gameHub.StartAsync();
    }

    private async Task NewGame()
    {
        Console.WriteLine("NewGame");
        _game = await ApiClient.GetGameById(_gameId);
        this.StateHasChanged();
    }

    private async Task DartThrow()
    {
        Console.WriteLine("DartThrow");
        _game = await ApiClient.GetGameById(_gameId);
        this.StateHasChanged();
    }

    private async Task GetGameOnReconnected()
    {
        Console.WriteLine("Reconnected.");
        try
        {
            _game = await ApiClient.GetGameById(_gameId);
        }
        catch
        {
            Console.WriteLine("Attempted to fetch game, but it did not exist.");
        }
        this.StateHasChanged();
    }
}